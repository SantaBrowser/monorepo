name: App CI

on:
    push:

jobs:
    buildAndTest:
        name: CI Pipeline
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: ['18'] # Add other versions if needed

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Install Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Restore Node.js dependencies
              uses: actions/cache@v3
              with:
                  path: ./node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install Node.js dependencies
              run: yarn install --frozen-lockfile

            - name: Cache Node.js dependencies
              uses: actions/cache/save@v3
              if: always()
              with:
                  path: ./node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

            - name: Build App
              run: yarn nx run app:build --prod --skip-nx-cache

    bumpVersion:
        name: 'Bump Version on develop'
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop'
        needs: buildAndTest
        outputs:
            newTag: ${{ steps.version-bump.outputs.newTag }}

        steps:
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.ref }}

            - name: 'Automated Version Bump'
              id: version-bump
              uses: 'phips28/gh-action-bump-version@master'
              with:
                  tag-prefix: 'v'
                  tag-suffix: '-app'
                  commit-message: 'CI: bumps version to {{version}}'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PACKAGEJSON_DIR: 'apps/app'

    autodeploy:
        name: Auto deploy develop to dev-app.thx.network
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop'
        needs: [buildAndTest, bumpVersion]
        outputs:
            newTag: ${{ steps.version-bump.outputs.newTag }}
        steps:
            - name: 'Checkout source code'
              uses: 'actions/checkout@v3'
              with:
                  ref: ${{ github.ref }}

            - name: Install Node.js ${{ matrix.node-version }}
              uses: actions/checkout@v3
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-3

            - name: Set BUILD_MODE based on branch
              run: echo "BUILD_MODE=$([[ '${{ github.ref_name }}' == 'main' ]] && echo 'prod' || ([[ '${{ github.ref_name }}' == 'develop' ]] && echo 'dev' || echo 'unknown'))" >> $GITHUB_ENV

            - name: Restore Node.js dependencies
              uses: actions/cache@v3
              with:
                  path: ./node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Build App
              run: yarn nx run app:build --prod --mode $BUILD_MODE --skip-nx-cache

            - name: Deploy
              run: aws s3 sync ./dist/apps/app s3://dev-app.thx.network --delete

    discord:
        name: Update Discord
        runs-on: ubuntu-latest
        needs: [autodeploy]
        steps:
            - name: 'Checkout source code'
              uses: 'actions/checkout@v3'
              with:
                  ref: ${{ github.ref }}

            - name: Set DISCORD_WEBHOOK based on branch
              run: echo "DISCORD_WEBHOOK=${{ secrets['DISCORD_WEBHOOK_' }}${{ github.ref == 'refs/heads/develop' && 'DEV' || github.ref == 'refs/heads/main' && 'PROD' }}" >> $GITHUB_ENV

            - name: Send message
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              uses: Ilshidur/action-discord@master
              with:
                  args: "${{ needs.autodeploy.result == 'success' && '✅' || '⛔' }} Released App `${{ needs.bumpVersion.outputs.newTag }}`"
